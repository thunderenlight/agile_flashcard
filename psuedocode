skinny contollers
fat models
  - logic in model

trello
  -to do
  -doing
  -done
  


Flashcard

As a user I want have a definition and then be able to guess the word
As a user I want to know if my guess is right or wrong
As a user I want to be able to end the game
As a user I want the cards to be different every time I play
As a user if I can't guess I want to get the right answer
*create a csv file
Initialize Game
- Parse data file
- Data into card objects
- Card Objects into a Deck
- Shuffle the Deck
- Greet player
    draw a card (using shift)
    display definition and options
    while input != exit or zero
       get user input
       
       
       WORLD_CAPITALS={
"Afghanistan"=> "Kabul",
"Albania"=> "Tirana",
"Algeria"=> "Algiers",
"Andorra"=> "Andorra la Vella",
"Angola"=> "Luanda",
"Antigua & Barbuda"=> "Saint John's",
"Argentina"=> "Buenos Aires",
"Armenia"=> "Yerevan",
"Australia"=> "Canberra",
"Austria"=> "Vienna",
"Azerbaijan"=> "Baku",

"Bahamas"=> "Nassau",
"Bahrain Al"=> "Manamah",
"Bangladesh"=> "Dhaka",
"Barbados"=> "Bridgetown",
"Belarus"=> "Minsk",
"Belgium"=> "Brussels",
"Belize"=> "Belmopan",
"Benin" => "Porto-Novo",
"Bhutan"=> "Thimphu",
"Bolivia"=> "Sucre",
"Bosnia & Herzegovina"=> "Sarajevo",
"Botswana"=> "Gaborone",
"Brazil"=> "Brasilia",
"Brunei"=> "Bandar Seri Begawan",
"Bulgaria"=> "Sofia",
"Burkina Faso"=> "Ouagadougou",
"Burundi"=> "Bujumbura",

"Cambodia"=> "Phnom Penh",
"Cameroon"=> "Yaounde",
"Canada"=> "Ottawa",
"Cape Verde"=> "Praia",
"Central African Republic"=> "Bangui",
"Chad"=> "N'Djamena",
"Chile"=> "Santiago",
"China"=> "Beijing",
"Colombia"=> "Bogota",
"Comoros"=> "Moroni",
"Congo"=> "Brazzaville",
"Congo Democratic Republic of the"=> "Kinshasa",
"Costa Rica"=> "San Jose",
"Cote d'Ivoire"=> "Abidjan",
"Croatia"=> "Zagreb",
"Cuba"=> "Havana",
"Cyprus"=> "Nicosia",
"Czech Republic"=> "Prague",

"Denmark"=> "Copenhagen",
"Djibouti"=> "Djibouti City",
"Dominica"=> "Roseau",
"Dominican Republic"=> "Santo Domingo",

"East Timor"=> "Dili",
"Ecuador"=> "Quito",
"Egypt"=> "Cairo",
"El Salvador"=> "San Salvador",
"Equatorial Guinea"=> "Malabo",
"Eritrea"=> "Asmara",
"Estonia"=> "Tallinn",
"Ethiopia"=> "Addis Ababa",

"Fiji"=> "Suva",
"Finland"=> "Helsinki",
"France"=> "Paris",

"Gabon"=> "Libreville",
"Gambia"=> "Banjul",
"Georgia"=> "Tbilisi",
"Germany"=> "Berlin",
"Ghana"=> "Accra",
"Greece"=> "Athens",
"Grenada"=> "Saint George's",
"Guatemala"=> "Guatemala City",
"Guinea"=> "Conakry",
"Guinea-issau"=> "Bissau",
"Guyana"=> "Georgetown",

"Haiti" => "Port-au-Prince",
"Honduras"=> "Tegucigalpa",
"Hungary"=> "Budapest",

"Iceland"=> "Reykjavik",
"India"=> "New Delhi",
"Indonesia"=> "Jakarta",
"Iran"=> "Tehran",
"Iraq"=> "Baghdad",
"Ireland"=> "Dublin",
"Israel"=> "Jerusalem",
"Italy"=> "Rome",

"Jamaica"=> "Kingston",
"Japan"=> "Tokyo",
"Jordan"=> "Amman",

"Kazakhstan"=> "Astana",
"Kenya"=> "Nairobi",
"Kiribati"=> "Tarawa Atoll",
"Korea North"=> "Pyongyang",
"Korea South"=> "Seoul",
"Kosovo"=> "Pristina",
"Kuwait"=> "Kuwait City",
"Kyrgyzstan"=> "Bishkek",

"Laos"=> "Vientiane",
"Latvia"=> "Riga",
"Lebanon"=> "Beirut",
"Lesotho"=> "Maseru",
"Liberia"=> "Monrovia",
"Libya"=> "Tripoli",
"Liechtenstein"=> "Vaduz",
"Lithuania"=> "Vilnius",
"Luxembourg"=> "Luxembourg",

"Macedonia"=> "Skopje",
"Madagascar"=> "Antananarivo",
"Malawi"=> "Lilongwe",
"Malaysia"=> "Kuala Lumpur",
"Maldives"=> "Male",
"Mali"=> "Bamako",
"Malta"=> "Valletta",
"Marshall Islands"=> "Majuro",
"Mauritania"=> "Nouakchott",
"Mauritius"=> "Port Louis",
"Mexico"=> "Mexico City",
"Micronesia"=> "Palikir",
"Moldova"=> "Chisinau",
"Monaco"=> "Monaco",
"Mongolia"=> "Ulaanbaatar",
"Montenegro"=> "Podgorica",
"Morocco"=> "Rabat",
"Mozambique"=> "Maputo",
"Myanmar (Burma)"=> "Rangoon",

"Namibia"=> "Windhoek",
"Nepal"=> "Kathmandu",
"Netherlands"=> "Amsterdam",
"New Zealand"=> "Wellington",
"Nicaragua"=> "Managua",
"Niger"=> "Niamey",
"Nigeria"=> "Abuja",
"Norway"=> "Oslo",

"Oman"=> "Muscat",

"Pakistan"=> "Islamabad",
"Palau"=> "Melekeok",
"Panama"=> "Panama City",
"Papua New Guinea"=> "Port Moresby",
"Paraguay"=> "Asuncion",
"Peru"=> "Lima",
"Philippines"=> "Manila",
"Poland"=> "Warsaw",
"Portugal"=> "Lisbon",

"Qatar"=> "Doha",

"Romania"=> "Bucharest",
"Russia"=> "Moscow",
"Rwanda"=> "Kigali",

"Saint Kitts and Nevis"=> "Basseterre",
"Saint Lucia"=> "Castries",
"Saint Vincent and the Grenadines"=> "Kingstown",
"Samoa"=> "Apia",
"San Marino"=> "San Marino",
"Sao Tome and Principe"=> "Sao Tome",
"Saudi Arabia"=> "Riyadh",
"Senegal"=> "Dakar",
"Serbia"=> "Belgrade",
"Seychelles"=> "Victoria",
"Sierra Leone"=> "Freetown",
"Singapore"=> "Singapore",
"Slovakia"=> "Bratislava",
"Slovenia"=> "Ljubljana",
"Solomon Islands"=> "Honiara",
"Somalia"=> "Mogadishu",
"South Africa"=> "Cape Town",
"South Sudan"=> "Juba",
"Spain"=> "Madrid",
"Sri Lanka"=> "Colombo",
"Sudan"=> "Khartoum",
"Suriname"=> "Paramaribo",
"Swaziland"=> "Mbabane",
"Sweden"=> "Stockholm",
"Switzerland"=> "Bernd",
"Syria"=> "Damascus",

"Taiwan"=> "Taipei",
"Tajikistan"=> "Dushanbe",
"Tanzania"=> "Dar es Salaam",
"Thailand"=> "Bangkok",
"Togo"=> "Lome",
"Tonga"=> "Nuku'alofa",
"Trinidad and Tobago" => "Port-of-Spain",
"Tunisia" => "Tunis",
"Turkey" => "Ankara",
"Turkmenistan" => "Ashgabat",
"Tuvalu" => "Vaiaku village, Funafuti province",

"Uganda " => "Kampala",
"Ukraine " => "Kyiv",
"United Arab Emirates " => "Abu Dhabi",
"United Kingdom " => "London",
"United States of America " => "Washington D.C.",
"Uruguay " => " Montevideo",
"Uzbekistan " => "Tashkent",

"Vanuatu"  => "Port - Vila",
"Vatican City (Holy See) " => "Vatican City",
"Venezuela " => "Caracas",
"Vietnam " => "Hanoi",

"Yemen " => "Sanaa",

"Zambia " => "Lusaka",
"Zimbabwe" => "Harare"
}
       compare with card.term
       if matches
          say congratulations and move to next card
          display definitions and options(still visible?)
      else
          say sorry, (reprompt by going back to while loop)
      endif
    endwhile
    exit by saying thanks for playing

    CLASSES and Methods

FLashCard
  attr_reader :term, :definition
   initialize(array) =first item is term , second is def
    term
    def
  _


Deck
